import 'dart:io';

import 'package:app/core/models/acknowledgement_info.dart';
import 'package:app/core/services/nav_service.dart';
import 'package:app/test/helper/mock_http_client.dart';
import 'package:app/test/test_data.dart';
import 'package:app/ui/views/active/form_field/acknowledgement_info_form_field.dart';
import 'package:app/ui/widgets/utility/image_screen.dart';
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:get_it/get_it.dart';
import 'package:mockito/mockito.dart';

class MockNavigationService extends Mock implements NavigationService {}

final testLocator = GetIt.instance;

void main() {
  final mockNavigationService = MockNavigationService();

  Future<void> pumpAckInfoFormField(WidgetTester tester, Widget widget) async =>
      tester.pumpWidget(MaterialApp(
          home: Scaffold(
              body: SingleChildScrollView(
                  child: Container(
        child: widget,
      )))));

  group('Acknowledgement Info Form Field', () {
    setUpAll(() async {
      testLocator.registerLazySingleton<NavigationService>(
          () => mockNavigationService);
      // Only needs to be done once since the HttpClient generated by this
      // override is cached as a static singleton.
      HttpOverrides.global = new TestHttpOverrides();
    });

    testWidgets(
        'does not show "missing images" when there are initial images to show',
        (WidgetTester tester) async {
      final imageMissingIconFinder = find.byIcon(Icons.image_not_supported);
      final widget = AcknowledgementInfoFormField(
          initialInfo: AcknowledgementInfo(
              shipperAck: "test file name",
              transporterAck: "test file name",
              receiverAck: "test file name"),
          onSaved: (_) {
            // Do nothing for test
          });
      await pumpAckInfoFormField(tester, widget);
      expect(imageMissingIconFinder, findsNothing);
    });

    testWidgets('shows "missing images" when no initial images to show',
        (WidgetTester tester) async {
      final imageMissingIconFinder = find.byIcon(Icons.image_not_supported);
      final widget = AcknowledgementInfoFormField(
          initialInfo: testAckInfo(),
          onSaved: (_) {
            // Do nothing for test
          });
      await pumpAckInfoFormField(tester, widget);
      expect(imageMissingIconFinder, findsNWidgets(3));
    });

    testWidgets('is valid when there exists initial ack images',
        (WidgetTester tester) async {
      final widget = AcknowledgementInfoFormField(
          initialInfo: AcknowledgementInfo(
              shipperAck: "test file name",
              transporterAck: "test file name",
              receiverAck: "test file name"),
          onSaved: (_) {
            // Do nothing for test
          });
      await pumpAckInfoFormField(tester, widget);
      expect(widget.validate(), true);
    });

    testWidgets('is invalid when there exists no initial ack images',
        (WidgetTester tester) async {
      final saveButtonFinder = find.widgetWithText(RaisedButton, "Save");
      final widget = AcknowledgementInfoFormField(
          initialInfo: testAckInfo(),
          onSaved: (_) {
            // Do nothing for test
          });
      await pumpAckInfoFormField(tester, widget);
      expect(widget.validate(), false);
      await tester.ensureVisible(saveButtonFinder);
      await tester.tap(saveButtonFinder);
      await tester.pumpAndSettle();
      expect(
          find.text(
              "* Missing one or more of the required acknowledgement images"),
          findsOneWidget);
    });

    testWidgets('shows save button', (WidgetTester tester) async {
      final saveButtonFinder = find.widgetWithText(RaisedButton, "Save");
      final widget = AcknowledgementInfoFormField(
          initialInfo: testAckInfo(),
          onSaved: (_) {
            // Do nothing for test
          });
      await pumpAckInfoFormField(tester, widget);
      await tester.ensureVisible(saveButtonFinder);
      expect(saveButtonFinder, findsOneWidget);
    });

    testWidgets('calls onSaved when save button pressed',
        (WidgetTester tester) async {
      final testInfo = AcknowledgementInfo(
          shipperAck: "test file name",
          transporterAck: "test file name",
          receiverAck: "test file name");
      final testAcknowledgementImages = testAcknowledgementInfoImages(
          shipperAck: "test file name",
          transporterAck: "test file name",
          receiverAck: "test file name");
      final saveButtonFinder = find.widgetWithText(RaisedButton, "Save");
      AcknowledgementInfoImages callbackInfo;
      final onSavedCallback =
          (AcknowledgementInfoImages info) => callbackInfo = info;

      final widget = AcknowledgementInfoFormField(
          initialInfo: testInfo, onSaved: onSavedCallback);
      await pumpAckInfoFormField(tester, widget);
      await tester.ensureVisible(saveButtonFinder);
      await tester.tap(saveButtonFinder);
      await tester.pumpAndSettle();
      expect(callbackInfo, testAcknowledgementImages);
    });

    testWidgets(
        'calls onSaved with acknowledgement edited when save button pressed',
        (WidgetTester tester) async {
      final mockFile = File("test file");
      when(mockNavigationService.navigateTo(ImageScreen.route))
          .thenAnswer((_) => Future.value(mockFile));
      final testInfo = AcknowledgementInfo(
          shipperAck: "test file name",
          transporterAck: "test file name",
          receiverAck: "test file name");
      final testAcknowledgementImages = testAcknowledgementInfoImages(
          shipperAck: "test file name",
          transporterAck: "test file name",
          receiverAck: "test file name",
          shipperAckRecentImage: mockFile);
      final shipperAckImageButtonFinder =
          find.byKey(ObjectKey("Shipper ack image picker"));
      AcknowledgementInfoImages callbackInfo;
      final onSavedCallback =
          (AcknowledgementInfoImages info) => callbackInfo = info;
      final widget = AcknowledgementInfoFormField(
          initialInfo: testInfo, onSaved: onSavedCallback);

      await pumpAckInfoFormField(tester, widget);
      await tester.ensureVisible(shipperAckImageButtonFinder);
      await tester.tap(shipperAckImageButtonFinder);
      await tester.pumpAndSettle();
      widget.save();
      expect(callbackInfo, testAcknowledgementImages);
    });
  });
}
